{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Game","useState","currentPacmanIndex","setPacmanIndex","prevPacmanIndex","setPrevPacmanIndex","squares","setSquares","start","setStart","layout","setLayout","walls","setWalls","count","setCount","ghost1Index","setGhost1Index","ghost1PrevIndex","setGhost1PrevIndex","className","ghost1PrevElem","setGhost1PrevElem","ghost2Index","setGhost2Index","ghost2PrevIndex","setGhost2PrevIndex","ghost2PrevElem","setGhost2PrevElem","pacDots","setPacdots","useLayoutEffect","getRandomInt","min","max","Math","ceil","floor","random","finalMap","num","lay","prevSquare","push","width","directions","i","direction","console","log","indexOf","finalLay","forEach","element","index","numOfNaighbors","createLay","finalWalls","elem","getWalls","board","length","createBoard","getPacdots","splice","timerId","setInterval","arr","nextIndex","moveGhost1","moveGhost2","clearInterval","movePacman","e","keyCode","document","addEventListener","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.923037f6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useEffect, useState, useLayoutEffect } from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction Game(){\r\n\r\n  const [currentPacmanIndex, setPacmanIndex] = useState(1000);\r\n  const [prevPacmanIndex, setPrevPacmanIndex] = useState(1000);\r\n  const [squares, setSquares] = useState([]);\r\n  const [start, setStart] = useState(\"prestart\");\r\n  const [layout, setLayout] = useState([]);\r\n  const [walls, setWalls] =useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [ghost1Index, setGhost1Index] = useState(500);\r\n  const [ghost1PrevIndex, setGhost1PrevIndex] = useState(500)\r\n  const [ghost1PrevElem, setGhost1PrevElem] = useState(<div className=\"wall\" key={ghost1PrevIndex}></div>);\r\n  const [ghost2Index, setGhost2Index] = useState(600);\r\n  const [ghost2PrevIndex, setGhost2PrevIndex] = useState(600)\r\n  const [ghost2PrevElem, setGhost2PrevElem] = useState(<div className=\"wall\" key={ghost2PrevIndex}></div>);\r\n  const [pacDots, setPacdots] = useState(1);\r\n  \r\n\r\n  useLayoutEffect(() => {\r\n    \r\n/*    function createLayout(num) {\r\n      const lay =[];\r\n      for(let i=0; i < num; i++){\r\n        lay.push(0);\r\n        \r\n      } \r\n      return lay;  \r\n    }\r\n*/  \r\n    function getRandomInt(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min)) + min; \r\n    }\r\n    function createLay(num) {\r\n      \r\n      const lay = [];\r\n      let prevSquare = 15;\r\n      lay.push(15);\r\n      let width = 28;\r\n      let directions = [-2, +2, -width*2, +width*2, -3, +3, -width*3, width*3];\r\n\r\n      for(let i = 0; i < num; i++){\r\n        \r\n        let direction = getRandomInt(0, 4);\r\n        \r\n        console.log(\"count:\" + i)\r\n        \r\n        if(lay.indexOf(prevSquare + directions[direction]) !== -1){\r\n          direction = getRandomInt(0, 8);\r\n        } \r\n        if(lay.indexOf(prevSquare + directions[direction]) !== -1){\r\n          direction = getRandomInt(0, 8);\r\n        } \r\n\r\n        \r\n        switch(direction){\r\n          \r\n          \r\n          case 0:\r\n            if(prevSquare % width - 1 !== 0){\r\n              prevSquare = prevSquare -1;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare - 1;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 1:\r\n            if(prevSquare % width < width - 2){\r\n              prevSquare = prevSquare + 1;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare + 1;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 2:\r\n            if(prevSquare - width*2 >= 0){\r\n              prevSquare = prevSquare - width;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare - width;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 3:\r\n            if(prevSquare + width*2 < width * width){\r\n              prevSquare = prevSquare + width;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare + width;\r\n              lay.push(prevSquare);\r\n            }\r\n            break;\r\n\r\n          \r\n        }\r\n        \r\n      }\r\n\r\n      const finalLay = [];\r\n      for(let i = 0; i < 784; i++) {\r\n        if(lay.indexOf(i)!==-1){\r\n          finalLay.push(0);\r\n        } else  {\r\n          finalLay.push(1);\r\n        }\r\n      }\r\n      \r\n      finalLay.forEach((element, index)=> {\r\n        if(element == 0){\r\n          let numOfNaighbors = 0;\r\n          \r\n          if(finalLay[index+1] ==0) numOfNaighbors++;\r\n          if(finalLay[index-1] ==0) numOfNaighbors++;\r\n          if(finalLay[index+28] ==0) numOfNaighbors++;\r\n          if(finalLay[index-28] ==0) numOfNaighbors++;\r\n\r\n          if(numOfNaighbors < 1) finalLay[index] = 1;\r\n       }\r\n\r\n      });\r\n      return finalLay;\r\n    }\r\n\r\n\r\n/*    function createWalls(num) {\r\n\r\n      function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min; \r\n      }\r\n      \r\n      const walls = [];\r\n      for (let i=0; i<num; i++){\r\n        let square = getRandomInt(0, 784);\r\n        \r\n        if(walls.indexOf(square)==-1){\r\n          walls.push(square);\r\n          \r\n        }\r\n      }\r\n      \r\n      return walls;\r\n      \r\n    }\r\n\r\n    function addWallsToLayout(layout) {\r\n      \r\n      walls.forEach(element => layout[element] = 1);\r\n      return layout;\r\n    }\r\n\r\n\r\n    function improveMap(layout) {\r\n      for(let i = 0; i< 28; i++){\r\n        layout[i] = 1;\r\n      }\r\n      for(let i = layout.length - 28; i< layout.length; i++){\r\n        layout[i] = 1;\r\n      }\r\n      for(let i = 0; i< layout.length - 28; i=i+28){\r\n        layout[i] = 1;\r\n      }\r\n      for(let i = 27; i< layout.length; i=i+28){\r\n        layout[i] = 1;\r\n      }\r\n\r\n      layout.forEach((element, index)=> {\r\n        if(element == 0){\r\n          let numOfNaighbors = 0;\r\n          \r\n          if(layout[index+1] ==0) numOfNaighbors++;\r\n          if(layout[index-1] ==0) numOfNaighbors++;\r\n          if(layout[index+28] ==0) numOfNaighbors++;\r\n          if(layout[index-28] ==0) numOfNaighbors++;\r\n          \r\n          if(numOfNaighbors == 1) {\r\n            const width = 28;\r\n            if (layout[index+28] !==0 && index + width + width < width * width){\r\n              layout[index+28] =0;\r\n            } else if(layout[index-28] !==0 && index - width -width >= 0){\r\n              layout[index-28] =0;\r\n            } else if(layout[index-28] ===0 && index - width >= 0){\r\n              layout[index-56] =0;\r\n            } else if(layout[index+1] !==0 && index % width < width - 2) {\r\n              layout[index+1] = 0;\r\n            } else if (layout[index-1] !==0 && index % width !== 1){\r\n              layout[index-1] =0;\r\n            }  else {\r\n              layout[index]=1;\r\n            }\r\n          } else if (numOfNaighbors == 0){\r\n            layout[index]=1;\r\n          };\r\n          \r\n        }\r\n      });\r\n      \r\n      return layout;\r\n    }\r\n\r\n    function getWalls(finalMap) {\r\n      finalMap.forEach((elem, index)=>{\r\n        if(elem == 1 && walls.indexOf(index)==-1){\r\n          walls.push(index);\r\n        } else if(elem==0 && walls.indexOf(index)!=-1){\r\n          walls.splice(walls.indexOf(index), 1);\r\n        }\r\n      })\r\n      return walls;\r\n    }\r\n    const initLayout = createLayout(784);\r\n    const walls = createWalls(700);\r\n    setWalls(walls);\r\n    const mapWithWalls = addWallsToLayout(initLayout);\r\n    const improvedMap1 = improveMap(mapWithWalls);\r\n    const improvedMap2 = improveMap(improvedMap1)\r\n  \r\n\r\n\r\n    setWalls(getWalls(improvedMap2));\r\n    setLayout(improvedMap2);\r\n\r\n    \r\n*/\r\n\r\n    function getWalls(lay) {\r\n      const walls = []\r\n      lay.forEach((elem, index) => {\r\n        if(elem === 1) walls.push(index);\r\n      })\r\n      return walls;\r\n    }\r\n    const finalMap = createLay(400);\r\n    const finalWalls = getWalls(finalMap)\r\n    setWalls(finalWalls);\r\n    setLayout(finalMap);\r\n    setStart(false);\r\n    \r\n  }, []);\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    if(start === false){\r\n      \r\n\r\n      function createBoard() {\r\n        const board = [];\r\n        \r\n        for(let i=0; i < layout.length; i++){\r\n          if(layout[i] === 0) {\r\n            board.push(<div className=\"pac-dot\" key={i}></div>)\r\n          } else if (layout[i] === 1) {\r\n            board.push(<div className=\"wall\" key={i}></div>)\r\n          }   \r\n        }\r\n        \r\n        \r\n        board[currentPacmanIndex] = <div className=\"pac-man\" key={currentPacmanIndex}>\r\n          <div className = \"pacman_eye\"></div>\r\n          <div className = \"pacman_mouth\"></div>\r\n        </div>;\r\n        board[ghost1Index] = <div className=\"ghost\" key={ghost1Index}></div>;\r\n        board[ghost2Index] = <div className=\"ghost\" key={ghost2Index}></div>;\r\n        \r\n        \r\n        return board;\r\n\r\n      }\r\n      \r\n      for(let i = 0; i<300; i++){\r\n        if(layout[i]==0){\r\n          setGhost1Index(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n      for(let i = 601; i<784; i++){\r\n        if(layout[i]==0){\r\n          setGhost2Index(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n      for(let i = 301; i<500; i++){\r\n        if(layout[i]==0){\r\n          \r\n          setPacmanIndex(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n      setSquares(createBoard());\r\n\r\n      function getPacdots() {\r\n        const pacDots = [];\r\n        for(let i = 0; i < layout.length; i++){\r\n          if(layout[i] === 0) pacDots.push(i);\r\n        }\r\n        return pacDots;\r\n      }\r\n      setPacdots(getPacdots());\r\n      setStart(true);\r\n\r\n\r\n    } else if(start){\r\n      \r\n      squares[ghost1PrevIndex] = ghost1PrevElem;\r\n      squares[ghost2PrevIndex] = ghost2PrevElem;\r\n      setGhost1PrevElem(squares[ghost1Index]);\r\n      setGhost1PrevIndex(ghost1Index);\r\n      setGhost2PrevElem(squares[ghost2Index]);\r\n      setGhost2PrevIndex(ghost2Index);\r\n      squares[ghost1Index] = <div className=\"ghost\" key={ghost1Index}></div>;\r\n      squares[ghost2Index] = <div className=\"ghost\" key={ghost2Index}></div>;\r\n      setSquares(squares);\r\n      if(prevPacmanIndex !== currentPacmanIndex){\r\n        function action() {\r\n          \r\n          if(pacDots.indexOf(currentPacmanIndex)!==-1){\r\n            pacDots.splice(pacDots.indexOf(currentPacmanIndex), 1);\r\n            setPacdots(pacDots);\r\n          }\r\n\r\n          squares[prevPacmanIndex] = <div key={prevPacmanIndex}></div>;\r\n          squares[currentPacmanIndex] = <div className=\"pac-man\" key={currentPacmanIndex}>\r\n            <div className = \"pacman_eye\"></div>\r\n            <div className = \"pacman_mouth\"></div>\r\n          </div>;\r\n          setSquares(squares);\r\n        }\r\n        action();\r\n        \r\n\r\n      }\r\n    }\r\n    \r\n  });\r\n  \r\n\r\n  useLayoutEffect(() => {\r\n    if(start){\r\n      \r\n      function moveGhost1() {\r\n        const width = 28;\r\n        const directions = [-1, +1, width, -width];     \r\n        let direction = directions[Math.floor(Math.random() * directions.length)];   \r\n        let arr =walls;\r\n        let nextIndex = ghost1Index + direction;\r\n        switch(direction) {\r\n          case -1:\r\n            \r\n            if (ghost1Index % width !== 0 && arr.indexOf(nextIndex)==-1) {setGhost1Index(nextIndex)}  else {setGhost1Index(ghost1Index)};\r\n            break;\r\n          case -28:\r\n            if(ghost1Index - width >= 0 && arr.indexOf(nextIndex)==-1) {setGhost1Index(nextIndex)}  else {setGhost1Index(ghost1Index)};\r\n            break;\r\n          case 1:\r\n            if (ghost1Index % width < width - 1 && arr.indexOf(nextIndex)==-1) {setGhost1Index(nextIndex)}  else {setGhost1Index(ghost1Index)};\r\n            break;\r\n          case 28:\r\n            if (ghost1Index + width < width * width && arr.indexOf(nextIndex)==-1) {setGhost1Index(nextIndex)}  else {setGhost1Index(ghost1Index)};\r\n            break;\r\n        }\r\n              \r\n        setCount(count+1);\r\n      }\r\n      function moveGhost2() {\r\n        const width = 28;\r\n        const directions = [-1, +1, width, -width];     \r\n        let direction = directions[Math.floor(Math.random() * directions.length)];   \r\n        \r\n        let nextIndex = ghost2Index + direction;\r\n        switch(direction) {\r\n          case -1:\r\n            \r\n            if (ghost2Index % width !== 0 && walls.indexOf(nextIndex)==-1) {setGhost2Index(nextIndex)}  else {setGhost2Index(ghost2Index)};\r\n            break;\r\n          case -28:\r\n            if(ghost2Index - width >= 0 && walls.indexOf(nextIndex)==-1) {setGhost2Index(nextIndex)}  else {setGhost2Index(ghost2Index)};\r\n            break;\r\n          case 1:\r\n            if (ghost2Index % width < width - 1 && walls.indexOf(nextIndex)==-1) {setGhost2Index(nextIndex)}  else {setGhost2Index(ghost2Index)};\r\n            break;\r\n          case 28:\r\n            if (ghost2Index + width < width * width && walls.indexOf(nextIndex)==-1) {setGhost2Index(nextIndex)}  else {setGhost2Index(ghost2Index)};\r\n            break;\r\n        }\r\n        setCount(count+1);\r\n      }\r\n      function moveGhosts() {\r\n        moveGhost1();\r\n        moveGhost2();\r\n      }\r\n      let timerId = setInterval(moveGhosts, 100);\r\n      \r\n      return () => {\r\n        clearInterval(timerId);\r\n        \r\n      }\r\n\r\n    }\r\n  });\r\n \r\n\r\n  useLayoutEffect(() => {\r\n    if(start){\r\n      \r\n      \r\n      document.addEventListener(\"keydown\", movePacman);\r\n      function movePacman(e) {\r\n        \r\n        \r\n        const width = 28;\r\n\r\n        switch(e.keyCode) {\r\n          case 37:\r\n            if(currentPacmanIndex % width !== 0 && walls.indexOf(currentPacmanIndex-1) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);         \r\n              setPacmanIndex(currentPacmanIndex-1);\r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 38:\r\n            if(currentPacmanIndex - width > 0 && walls.indexOf(currentPacmanIndex-width) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n              \r\n              setPacmanIndex(currentPacmanIndex-width);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 39:\r\n            if(currentPacmanIndex % width < width - 1 && walls.indexOf(currentPacmanIndex + 1) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n             \r\n              setPacmanIndex(currentPacmanIndex+1);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 40:\r\n            if(currentPacmanIndex + width < width * width && walls.indexOf(currentPacmanIndex + width )== -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n              \r\n              setPacmanIndex(currentPacmanIndex+width);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n        }   \r\n      }\r\n\r\n\r\n      return () => {\r\n        document.removeEventListener(\"keydown\", movePacman);\r\n      }\r\n    }\r\n    \r\n  });\r\n\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid\">{squares}</div>\r\n      <div>{pacDots.length}</div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}