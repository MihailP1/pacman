{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Game","game","useState","currentPacmanIndex","setPacmanIndex","prevPacmanIndex","setPrevPacmanIndex","squares","setSquares","stage","setStage","layout","setLayout","walls","setWalls","count","setCount","ghost1Index","setGhost1Index","ghost1PrevIndex","setGhost1PrevIndex","className","ghost1PrevElem","setGhost1PrevElem","ghost1Direction","setGhost1Direction","stepsToChangeGhost1","setStepsToChangeGhost1","ghost1Steps","setGhost1Steps","ghost2Index","setGhost2Index","ghost2PrevIndex","setGhost2PrevIndex","ghost2PrevElem","setGhost2PrevElem","ghost2Direction","setGhost2Direction","stepsToChangeGhost2","setStepsToChangeGhost2","ghost2Steps","setGhost2Steps","pacDots","setPacdots","width","useLayoutEffect","getRandomInt","min","max","Math","ceil","floor","random","finalMap","num","lay","prevSquare","push","directions","i","direction","indexOf","finalLay","forEach","element","index","numOfNaighbors","createLay","finalWalls","elem","getWalls","length","board","createBoard","getPacdots","splice","moveGhost","states","sets","way","changeDirection","steps","stepsToChange","setDirection","setSteps","setStepToChange","setIndex","ghost1States","prevIndex","prevElem","ghost1Sets","setPrevIndex","setPrevElem","ghost2States","ghost2Sets","timerId","setInterval","clearInterval","movePacman","e","keyCode","document","addEventListener","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49b51a21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useEffect, useState, useLayoutEffect } from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>PACMAN</h1>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction Game(){\r\n\r\n  const [currentPacmanIndex, setPacmanIndex] = useState();\r\n  const [prevPacmanIndex, setPrevPacmanIndex] = useState();\r\n  const [squares, setSquares] = useState([]);\r\n  //stages: \"preparation\" -> \"game\" -> \"game over\"\r\n  const [stage, setStage] = useState();\r\n  const [layout, setLayout] = useState([]);\r\n  const [walls, setWalls] =useState([]);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [ghost1Index, setGhost1Index] = useState();\r\n  const [ghost1PrevIndex, setGhost1PrevIndex] = useState()\r\n  const [ghost1PrevElem, setGhost1PrevElem] = useState(<div className=\"wall\" key={ghost1PrevIndex}></div>);\r\n  const [ghost1Direction, setGhost1Direction] = useState(); \r\n  const [stepsToChangeGhost1, setStepsToChangeGhost1] = useState(3);\r\n  const [ghost1Steps, setGhost1Steps] = useState(0);\r\n  \r\n\r\n  const [ghost2Index, setGhost2Index] = useState();\r\n  const [ghost2PrevIndex, setGhost2PrevIndex] = useState()\r\n  const [ghost2PrevElem, setGhost2PrevElem] = useState(<div className=\"wall\" key={ghost2PrevIndex}></div>);\r\n  const [ghost2Direction, setGhost2Direction] = useState(); \r\n  const [stepsToChangeGhost2, setStepsToChangeGhost2] = useState(3);\r\n  const [ghost2Steps, setGhost2Steps] = useState(0);\r\n\r\n  const [pacDots, setPacdots] = useState(1);\r\n  //width of square\r\n  const [width, setWidth] = useState(28);\r\n  \r\n\r\n  useLayoutEffect(() => {\r\n    \r\n\r\n    function getRandomInt(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min)) + min; \r\n    }\r\n    function createLay(num) {\r\n      \r\n      const lay = [];\r\n      let prevSquare = 15;\r\n      lay.push(15);\r\n      \r\n      let directions = [-2, +2, -width*2, +width*2, -3, +3, -width*3, width*3];\r\n\r\n      for(let i = 0; i < num; i++){\r\n        \r\n        let direction = getRandomInt(0, 4);\r\n        \r\n        \r\n        \r\n        if(lay.indexOf(prevSquare + directions[direction]) !== -1){\r\n          direction = getRandomInt(0, 8);\r\n        } \r\n        if(lay.indexOf(prevSquare + directions[direction]) !== -1){\r\n          direction = getRandomInt(0, 8);\r\n        } \r\n\r\n        \r\n        switch(direction){\r\n          \r\n          \r\n          case 0:\r\n            if(prevSquare % width - 1 !== 0){\r\n              prevSquare = prevSquare -1;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare - 1;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 1:\r\n            if(prevSquare % width < width - 2){\r\n              prevSquare = prevSquare + 1;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare + 1;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 2:\r\n            if(prevSquare - width*2 >= 0){\r\n              prevSquare = prevSquare - width;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare - width;\r\n              lay.push(prevSquare);\r\n            } \r\n            break;\r\n          \r\n          case 3:\r\n            if(prevSquare + width*2 < width * width){\r\n              prevSquare = prevSquare + width;\r\n              lay.push(prevSquare);\r\n              prevSquare = prevSquare + width;\r\n              lay.push(prevSquare);\r\n            }\r\n            break;\r\n\r\n          \r\n        }\r\n        \r\n      }\r\n\r\n      const finalLay = [];\r\n      for(let i = 0; i < 784; i++) {\r\n        if(lay.indexOf(i)!==-1){\r\n          finalLay.push(0);\r\n        } else  {\r\n          finalLay.push(1);\r\n        }\r\n      }\r\n      \r\n      finalLay.forEach((element, index)=> {\r\n        if(element == 0){\r\n          let numOfNaighbors = 0;\r\n          \r\n          if(finalLay[index+1] ==0) numOfNaighbors++;\r\n          if(finalLay[index-1] ==0) numOfNaighbors++;\r\n          if(finalLay[index+28] ==0) numOfNaighbors++;\r\n          if(finalLay[index-28] ==0) numOfNaighbors++;\r\n\r\n          if(numOfNaighbors < 1) finalLay[index] = 1;\r\n       }\r\n\r\n      });\r\n      return finalLay;\r\n    }\r\n\r\n      \r\n    function getWalls(lay) {\r\n      const walls = []\r\n      lay.forEach((elem, index) => {\r\n        if(elem === 1) walls.push(index);\r\n      })\r\n      return walls;\r\n    }\r\n    const finalMap = createLay(400);\r\n    const finalWalls = getWalls(finalMap)\r\n    setWalls(finalWalls);\r\n    setLayout(finalMap);\r\n\r\n    \r\n    const directions = [-1, +1, width, -width];     \r\n    setGhost1Direction(directions[Math.floor(Math.random() * directions.length)]); \r\n\r\n    setStage(\"preparation\");\r\n    \r\n  }, []);\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    if(stage === \"preparation\") {\r\n      \r\n\r\n      function createBoard() {\r\n        const board = [];\r\n        \r\n        for(let i=0; i < layout.length; i++){\r\n          if(layout[i] === 0) {\r\n            board.push(<div className=\"pac-dot\" key={i}></div>)\r\n          } else if (layout[i] === 1) {\r\n            board.push(<div className=\"wall\" key={i}></div>)\r\n          }   \r\n        }\r\n        \r\n        \r\n        board[currentPacmanIndex] = <div className=\"pac-man\" key={currentPacmanIndex}>\r\n          <div className = \"pacman_eye\"></div>\r\n          <div className = \"pacman_mouth\"></div>\r\n        </div>;\r\n        board[ghost1Index] = <div className=\"ghost\" key={ghost1Index}>\r\n          <div className = \"left_eye\"></div>\r\n          <div className = \"right_eye\"></div>\r\n        </div>;\r\n        board[ghost2Index] = <div className=\"ghost\" key={ghost2Index}>\r\n          <div className = \"left_eye\"></div>\r\n          <div className = \"right_eye\"></div>\r\n        </div>;\r\n        \r\n        \r\n        \r\n        \r\n        return board;\r\n\r\n      }\r\n      \r\n      for(let i = 0; i<300; i++){\r\n        if(layout[i]==0){\r\n          setGhost1Index(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n      for(let i = 601; i<784; i++){\r\n        if(layout[i]==0){\r\n          setGhost2Index(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n      for(let i = 301; i<500; i++){\r\n        if(layout[i]==0){\r\n          \r\n          setPacmanIndex(i);\r\n          \r\n          break;\r\n        }\r\n      }\r\n\r\n      setSquares(createBoard());\r\n      \r\n      function getPacdots() {\r\n        const pacDots = [];\r\n        for(let i = 0; i < layout.length; i++){\r\n          if(layout[i] === 0) pacDots.push(i);\r\n        }\r\n        return pacDots;\r\n      }\r\n      setPacdots(getPacdots());\r\n\r\n      \r\n      setStage(\"game\");\r\n      \r\n      \r\n\r\n\r\n    } else if(stage === \"game\"){\r\n      if(currentPacmanIndex === ghost1Index || currentPacmanIndex === ghost2Index) {\r\n        setStage(\"game over\");\r\n      }\r\n      squares[ghost1PrevIndex] = ghost1PrevElem;\r\n      squares[ghost2PrevIndex] = ghost2PrevElem;\r\n      setGhost1PrevElem(squares[ghost1Index]);\r\n      setGhost1PrevIndex(ghost1Index);\r\n      setGhost2PrevElem(squares[ghost2Index]);\r\n      setGhost2PrevIndex(ghost2Index);\r\n      squares[ghost1Index] = <div className=\"ghost\" key={ghost1Index}>\r\n        <div className = \"left_eye\"></div>\r\n        <div className = \"right_eye\"></div>\r\n      </div>;\r\n      squares[ghost2Index] = <div className=\"ghost\" key={ghost2Index}>\r\n        <div className = \"left_eye\"></div>\r\n        <div className = \"right_eye\"></div>\r\n      </div>;\r\n      setSquares(squares);\r\n      if(prevPacmanIndex !== currentPacmanIndex){\r\n\r\n        function action() {\r\n          \r\n          if(pacDots.indexOf(currentPacmanIndex)!==-1){\r\n            pacDots.splice(pacDots.indexOf(currentPacmanIndex), 1);\r\n            setPacdots(pacDots);\r\n          }\r\n\r\n          \r\n          squares[prevPacmanIndex] = <div key={prevPacmanIndex}></div>;\r\n          squares[currentPacmanIndex] = <div className=\"pac-man\" key={currentPacmanIndex}>\r\n            <div className = \"pacman_eye\"></div>\r\n            <div className = \"pacman_mouth\"></div>\r\n          </div>;\r\n          \r\n          setSquares(squares);\r\n        }\r\n\r\n        action();\r\n        \r\n      }\r\n    }\r\n    \r\n  });\r\n  \r\n\r\n  useLayoutEffect(() => {\r\n    if(stage === \"game\"){\r\n      \r\n\r\n      const ghost1States = {\r\n        index: ghost1Index,\r\n        prevIndex: ghost1PrevIndex,\r\n        prevElem: ghost1PrevElem,\r\n        direction: ghost1Direction,\r\n        stepsToChange: stepsToChangeGhost1,\r\n        steps: ghost1Steps\r\n      };\r\n      const ghost1Sets={\r\n        setIndex: setGhost1Index,\r\n        setPrevIndex: setGhost1PrevIndex,\r\n        setPrevElem: setGhost1PrevElem,\r\n        setDirection: setGhost1Direction,\r\n        setStepToChange: setStepsToChangeGhost1,\r\n        setSteps: setGhost1Steps\r\n      };\r\n      const ghost2States = {\r\n        index: ghost2Index,\r\n        prevIndex: ghost2PrevIndex,\r\n        prevElem: ghost2PrevElem,\r\n        direction: ghost2Direction,\r\n        stepsToChange: stepsToChangeGhost2,\r\n        steps: ghost2Steps\r\n      };\r\n      const ghost2Sets={\r\n        setIndex: setGhost2Index,\r\n        setPrevIndex: setGhost2PrevIndex,\r\n        setPrevElem: setGhost2PrevElem,\r\n        setDirection: setGhost2Direction,\r\n        setStepToChange: setStepsToChangeGhost2,\r\n        setSteps: setGhost2Steps\r\n      };\r\n\r\n      function moveGhost(states, sets){\r\n        \r\n        \r\n        \r\n        let way = Math.floor(Math.random() * 2);\r\n        \r\n        function getRandomInt(min, max) {\r\n          min = Math.ceil(min);\r\n          max = Math.floor(max);\r\n          return Math.floor(Math.random() * (max - min)) + min; \r\n        }\r\n\r\n        const directions = [-1, +1, width, -width]; \r\n\r\n\r\n        function changeDirection(direction){\r\n          if(states.steps !== states.stepsToChange) {\r\n            sets.setDirection(direction);\r\n            sets.setSteps(states.steps + 1);\r\n          } else if (states.steps === states.stepsToChange) {\r\n              \r\n              sets.setDirection(directions[Math.floor(Math.random() * directions.length)]);\r\n              sets.setStepToChange(getRandomInt(2, 3));\r\n              sets.setSteps(0);\r\n          }\r\n        } \r\n\r\n        switch(states.direction) {\r\n           \r\n          case -1:\r\n            \r\n            if (states.index % width !== 0 && walls.indexOf(states.index - 1) == -1) {\r\n              \r\n              sets.setIndex(states.index - 1);\r\n              changeDirection(-1);   \r\n              break;\r\n            } else if(way === 0 && states.index - width >= 0 && walls.indexOf(states.index - width) == -1) {\r\n              \r\n              sets.setIndex(states.index - width);\r\n              changeDirection(-28); \r\n              break;\r\n            } else if (way === 1 && states.index + width < width * width && walls.indexOf(states.index + width)==-1) {\r\n              \r\n              sets.setIndex(states.index + width);\r\n              changeDirection(28); \r\n              break;\r\n            } else if (states.index % width < width - 1 && walls.indexOf(states.index + 1)==-1) {\r\n              \r\n              sets.setIndex(states.index + 1);\r\n              changeDirection(1); \r\n              break;\r\n            }\r\n          case -28:\r\n            if(states.index - width >= 0 && walls.indexOf(states.index - width)==-1) {\r\n              \r\n              sets.setIndex(states.index - width);\r\n              changeDirection(-28); \r\n              break;\r\n            } else if (way === 0 && states.index % width < width - 1 && walls.indexOf(states.index + 1)==-1) {\r\n              \r\n              sets.setIndex(states.index + 1);\r\n              changeDirection(1); \r\n              break;\r\n            } else if (way === 1 && states.index % width !== 0 && walls.indexOf(states.index - 1)==-1) {\r\n              \r\n              sets.setIndex(states.index - 1);\r\n              changeDirection(-1); \r\n              break;\r\n            } else if (states.index + width < width * width && walls.indexOf(states.index + width)==-1) {\r\n              \r\n              sets.setIndex(states.index + width);\r\n              changeDirection(28); \r\n              break;\r\n            }\r\n            \r\n            \r\n          case 1:\r\n            if (states.index % width < width - 1 && walls.indexOf(states.index + 1)==-1) {\r\n             \r\n              sets.setIndex(states.index + 1);\r\n              changeDirection(1); \r\n              break;\r\n            } else if(way === 0 && states.index - width >= 0 && walls.indexOf(states.index - width)==-1) {\r\n              \r\n              sets.setIndex(states.index - width);\r\n              changeDirection(-28); \r\n              break;\r\n            } else if (way === 1 && states.index + width < width * width && walls.indexOf(states.index + width)==-1) {\r\n              \r\n              sets.setIndex(states.index + width);\r\n              changeDirection(28); \r\n              break;\r\n            } else if (states.index % width !== 0 && walls.indexOf(states.index - 1)==-1) {\r\n              \r\n              sets.setIndex(states.index - 1);\r\n              changeDirection(-1); \r\n              break;\r\n            }\r\n            \r\n          case 28:\r\n            if (states.index + width < width * width && walls.indexOf(states.index + width)==-1) {\r\n              \r\n              sets.setIndex(states.index + width);\r\n              changeDirection(28); \r\n              break;\r\n            } else if (way === 0 && states.index % width < width - 1 && walls.indexOf(states.index + 1)==-1) {\r\n              \r\n              sets.setIndex(states.index + 1);\r\n              changeDirection(1); \r\n              break;\r\n            } else if (way === 1 && states.index % width !== 0 && walls.indexOf(states.index - 1)==-1) {\r\n              \r\n              sets.setIndex(states.index - 1);\r\n              changeDirection(-1); \r\n              break;\r\n            } else if(states.index - width >= 0 && walls.indexOf(states.index - width)==-1) {\r\n              \r\n              sets.setIndex(states.index - width);\r\n              changeDirection(-28); \r\n              break;\r\n            }\r\n            \r\n          default:\r\n            \r\n            sets.setIndex(states.index);\r\n            \r\n           \r\n            sets.setDirection(directions[Math.floor(Math.random() * directions.length)]);\r\n            break;\r\n\r\n        }\r\n         \r\n        \r\n      }\r\n      \r\n      function moveGhosts() {\r\n        moveGhost(ghost1States, ghost1Sets);\r\n        moveGhost(ghost2States, ghost2Sets);\r\n      }\r\n      let timerId = setInterval(moveGhosts, 140);\r\n      \r\n      return () => {\r\n        clearInterval(timerId);\r\n        \r\n      }\r\n\r\n    }\r\n  });\r\n \r\n  \r\n  useLayoutEffect(() => {\r\n  \r\n    if(stage === \"game\"){\r\n      \r\n      if(pacDots.length === 0) setStage(\"game over\");\r\n      document.addEventListener(\"keydown\", movePacman);\r\n      function movePacman(e) {\r\n        \r\n        \r\n        \r\n\r\n        switch(e.keyCode) {\r\n          case 37:\r\n            if(currentPacmanIndex % width !== 0 && walls.indexOf(currentPacmanIndex-1) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);         \r\n              setPacmanIndex(currentPacmanIndex-1);\r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 38:\r\n            if(currentPacmanIndex - width > 0 && walls.indexOf(currentPacmanIndex-width) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n              \r\n              setPacmanIndex(currentPacmanIndex-width);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 39:\r\n            if(currentPacmanIndex % width < width - 1 && walls.indexOf(currentPacmanIndex + 1) == -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n             \r\n              setPacmanIndex(currentPacmanIndex+1);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n          case 40:\r\n            if(currentPacmanIndex + width < width * width && walls.indexOf(currentPacmanIndex + width )== -1){\r\n              setPrevPacmanIndex(currentPacmanIndex);\r\n              \r\n              setPacmanIndex(currentPacmanIndex+width);\r\n              \r\n              setCount(count + 1);\r\n            }\r\n            break;\r\n        }   \r\n      }\r\n\r\n\r\n      return () => {\r\n        document.removeEventListener(\"keydown\", movePacman);\r\n      }\r\n    } \r\n    \r\n  });\r\n\r\n  let game;\r\n  if(stage !== \"game over\"){\r\n    game = <div className = \"grid\">{squares}</div>;\r\n  } else if (stage === \"game over\") {\r\n    game = <div >GAME OVER</div>;\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className = \"game\">\r\n      {game}\r\n      <div className = \"game_data\">{pacDots.length}</div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}